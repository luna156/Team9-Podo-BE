plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.softeer'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jar {
    enabled = false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // sms
    implementation 'net.nurigo:sdk:4.2.7'
    // swagger (spring 3.x버전이라 springfox 적용불가, springdoc 중에서 호환되는 종속성 사용)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    // javax validation
    implementation 'javax.validation:validation-api:2.0.1.Final'
    // spring starter package
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    // mysql
	runtimeOnly 'com.mysql:mysql-connector-j'
    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // jwe encrypt
    implementation 'com.nimbusds:nimbus-jose-jwt:9.37.3'
    // lombok
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // test h2 database
    testRuntimeOnly 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
}

// jacoco report 설정
jacocoTestReport {
	reports {
		// html로 report 생성하기
		// 빌드경로/jacoco/report.html 폴더 내부로 경로 설정
		html.destination file("$buildDir/jacoco/report.html")
	}
	// 커버리지 보고서 제외 범위 설정
	getClassDirectories().setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/controller' // dto package 내부는 제외
				])
			})
	)
	// jacocoTestReport가 끝나면 jacocoTestCoverageVerification 동작
	finalizedBy 'jacocoTestCoverageVerification'
}

// jacoco 커버리지 검증 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 커버리지 적용 여부
			element = 'CLASS' // 커버리지 적용 단위

			// 라인 커버리지 설정
			// 적용 대상 전체 소스 코드들을 한줄 한줄 따졌을 때 테스트 코드가 작성되어 있는 줄의 빈도
			// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 브랜치 커버리지 설정
			// if-else 등을 활용하여 발생되는 분기들 중 테스트 코드가 작성되어 있는 빈도
			// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 라인 최대 갯수 설정
			// 빈 줄을 제외하고 하나의 자바 파일에서 작성될 수 있는 최대 라인 갯수
			// 한 파일에 최대 500줄까지 작성되어야 함
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 500
			}
		}
	}
}